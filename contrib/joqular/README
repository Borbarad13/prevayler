Java Object Query Layer (JOQULAR) or SODA for POJOs

This file currently contains the quick brain-dump of one mailing list
member about how to go about implementing a SODA for POJOs, which we
have tentatively named JOQULAR.

I don't have time to do a full core dump into a README, but I think
that the basic insight is that the query builder engine has to be able
to dynamically figure out if the POJO it's examining is a "real" POJO
or if it is some sort of collection when you call the query.descend()
method.  If it is some sort of collection, it has to figure out what
kind of collection it is (List, Map) and how to either index it or
iterate over it.

But you can do this pretty accurately by checking (object instanceof
Sometype) and by reflecting on the object's methods.  For example, if
the object has a method

public Iterator iterator();

You can be pretty confident that you've just found a way to iterate
over its content, even if the object isn't a java.util.List.
Similarly, if you find a keySet() method, you can be pretty sure that
you will also find Object get() and put(Object) along with the ability
to call keySet().iterator().

By codifying all of these naming conventions from the various
collections frameworks, you can come up with a query tool for POJOs
that is likely to be able to handle 90% of the cases.  And it's
arguable that in the other 10%, the containers should be refactored to
fit the standard naming patterns anyway. ;-)

--daveo@swtworkbench.com


