<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [
    <!ENTITY general-utility-targets SYSTEM "file:./utility-targets.incl">
    <!ENTITY self-customized-targets SYSTEM "file:./custom-targets.incl">
]>

<project name="Prevayler" default="compile.core" basedir=".">

    <property file="${user.home}/.${ant.project.name}-build.properties"/>
    <property file="${user.home}/.build.properties"/>
    <property environment="env"/> <!-- provides access to system environment variables -->
    <property file="build.properties"/>
    <property file="sample.build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

    <property name="targetdir"              location="${basedir}/target" />
    <property name="cachedir.demo"          location="${targetdir}/demo-cache" />
    <property name="cachedir.test"          location="${targetdir}/test-cache" />
    <property name="classesdir.main"        location="${targetdir}/main-classes" />
    <property name="classesdir.test"        location="${targetdir}/test-classes" />
    <property name="classesdir.contrib"     location="${targetdir}/contrib-classes" />
    <property name="testreportdir"          location="${targetdir}/test-reports" />
    <property name="libdir"                 location="${targetdir}/lib" />
    <property name="dependenciesdir"        location="${dependencies.path}" />
    <property name="contribdir"             location="${contrib.path}" />
    <property name="rootdir"                location="${basedir}/root" />
    <property name="docdir"                 location="${rootdir}/docs" />
    <property name="srcdir"                 location="${basedir}/src" />
    <property name="srcdir.main"            location="${srcdir}/main" />
    <property name="srcdir.test"            location="${srcdir}/test" />
    <property name="src.package.path"       value="org/prevayler" />
    <property name="src.packages"           value="org.prevayler, org.prevayler.implementation.*" />
    <property name="src.packages.excludes"  value="org.prevayler.demos.*, org.prevayler.test.*" />

    <property name="log4j.system.variable.dynamic.name" value="$${${app.name}.log.home}" />
    <property name="log4j.system.variable.name" value="${app.name}.log.home" />
    <property name="log4j.log.path" location="${targetdir}/logs" />

    <fileset dir="${srcdir.test}" id="unit.test.files"
             includes="${unit.test.includes}"
             excludes="${unit.test.excludes}" />

<!--  ==================== Compilation Control Options ==================== -->

    <property name="build.debug"        value="on" />
    <property name="build.deprecation"  value="off" />
    <property name="build.optimize"     value="on" />
    <property name="build.verbose"      value="off" />

<!-- ==================== Compilation Classpath =========================== -->

    <path id="build.classpath" >
        <pathelement location="${skaringa.jar}"/>
        <pathelement location="${log4j.jar}"/>
        <pathelement location="${commons-jxpath.jar}"/>
        <pathelement location="${ant-contrib.jar}"/>
    </path>

    <path id="build.main.classpath" >
        <pathelement location="${classesdir.main}" />
        <path refid="build.classpath" />
    </path>

    <path id="build.run.classpath" >
        <pathelement location="${classesdir.contrib}" />
        <pathelement location="${classesdir.test}" />
        <path refid="build.main.classpath" />
    </path>

<!-- ==================== Rebuild Target ====================================== -->

  <target name="rebuild" depends="clean, compile.core"
          description="Clean, then compile core sources" />

<!-- ==================== Clean Targets ==================================== -->

    <target
        name="clean.all"
        depends="clean, clean.cache, clean.dependencies, clean.vizant"
        description="Bring everything back to its initial clean state" />

    <target name="clean"
            description="Delete old build and dist directories" >
        <delete dir="${classesdir.main}" />
        <delete dir="${classesdir.test}" />
        <delete dir="${classesdir.contrib}" />
        <delete dir="${libdir}" />
        <delete dir="${testreportdir}" />
        <delete dir="${log4j.log.path}" />
        <delete includeEmptyDirs="true">
            <fileset dir="${docdir}/api" includes="**/**" excludes="**/README" />
        </delete>
        <delete>
            <fileset dir="${targetdir}" includes="*.*" />
        </delete>
    </target>

    <target name="clean.cache"
            depends="clean.cache.tests, clean.cache.demos"
            description="Removes log and snapshot files generated by tests and demos" />

    <target name="clean.cache.tests"
            description="Removes log and snapshot files generated by tests" >
        <delete dir="${cachedir.test}" />
    </target>

    <target name="clean.cache.demos"
            description="Removes log and snapshot files generated by demos" >
        <delete dir="${cachedir.demo}" />
    </target>

<!-- ==================== Prepare Target ================================== -->

    <target name="prepare" >
        <mkdir  dir="target" />
        <mkdir  dir="${classesdir.main}" />
        <mkdir  dir="${classesdir.test}" />
        <mkdir  dir="${classesdir.contrib}" />
        <mkdir  dir="${log4j.log.path}" />
        <copy todir="${basedir}" >
            <fileset dir="${basedir}">
                <present present="srconly" targetdir="${basedir}">
                    <mapper type="glob" from="sample.*" to="*" />
                </present>
            </fileset>
            <filterset>
                <filter token="log4j.system.variable.dynamic.name" value="${log4j.system.variable.dynamic.name}" />
            </filterset>
            <mapper type="glob" from="sample.*" to="*" />
        </copy>
        <copy file="${basedir}/log4j.xml" todir="${classesdir.main}" />
        <tstamp/>
    </target>

<!-- ==================== Compile Targets ================================== -->

    <target name="compile" depends="compile.core, compile.test, compile.contrib"
            description="Compile all specified sources" />
    <target name="compile.core" depends="prepare, download.core.dependencies"
            description="Compile core sources" >
        <antcall target="-compile.sub">
            <param name="csrcdir"   value="${srcdir.main}" />
            <param name="cdestdir"  value="${classesdir.main}" />
            <param name="ccprefid"  value="build.classpath" />
        </antcall>
    </target>
    <target name="compile.test" depends="compile.core"
            description="Compile test case sources" >
        <antcall target="-compile.sub">
            <param name="csrcdir"   value="${srcdir.test}" />
            <param name="cdestdir"  value="${classesdir.test}" />
        </antcall>
    </target>
    <target name="compile.contrib" depends="download.contrib.dependencies, compile.core"
            description="Compile contrib sources" >
        <antcall target="-compile.sub">
            <param name="csrcdir"   value="${src.contrib.projects}" />
            <param name="cdestdir"  value="${classesdir.contrib}" />
        </antcall>
    </target>

<!-- ==================== Dist Target ===================================== -->

    <target name="dist" depends="jar,javadoc"
            description="Create binary distribution" >
        <!-- Generate ZIP distribution -->
        <zip destfile="${targetdir}/${file.name.dist}.zip">
            <zipfileset dir="${rootdir}"      prefix="${app.name}"/>
            <zipfileset dir="${libdir}"       prefix="${app.name}/lib"/>
            <zipfileset dir="${srcdir.main}"  prefix="${app.name}/src"/>
        </zip>
        <!-- Generate GZIP distribution -->
        <tar destfile="${targetdir}/${file.name.dist}.tar" longfile="gnu">
            <tarfileset dir="${rootdir}"      prefix="${app.name}"/>
            <tarfileset dir="${libdir}"      prefix="${app.name}/lib"/>
            <tarfileset dir="${srcdir.main}"  prefix="${app.name}/src"/>
        </tar>
        <gzip src="${targetdir}/${file.name.dist}.tar" zipfile="${targetdir}/${file.name.dist}.tar.gz"/>
        <delete file="${targetdir}/${file.name.dist}.tar" />
    </target>

<!-- ==================== Javadoc Target ================================== -->

    <target name="javadoc" depends="compile.core"
            description="Create Javadoc API documentation" >
        <mkdir dir="${docdir}/api" />
        <!-- beginners -->
        <antcall target="-javadoc.sub">
            <param name="jdpackagenames" value="org.prevayler" />
            <param name="jdsourcepath"   value="${srcdir.main}" />
            <param name="jddestdir"      value="${docdir}/api/beginners" />
        </antcall>
        <!-- advanced -->
        <antcall target="-javadoc.sub">
            <param name="jdpackagenames"        value="${src.packages}" />
            <param name="jdexcludepackagenames" value="${src.packages.excludes}" />
            <param name="jdsourcepath"          value="${srcdir.main}" />
            <param name="jddestdir"             value="${docdir}/api/advanced" />
        </antcall>
    </target>

<!-- ==================== Jar Targets ================================== -->

    <target name="jar" depends="compile.core"
            description="Creates all jars" >
        <mkdir dir="${libdir}" />
        <!--Creates a JAR containing only essential Prevayler files -->
        <antcall target="-jar.sub">
            <param name="jarfile"   value="${libdir}/${jar.name.core}" />
            <param name="jbasedir"  value="${classesdir.main}" />
            <param name="jexcludes" value="**/demo/**,**/demos/**,**/test/**,log4j.xml" />
        </antcall>
        <!--Creates a JAR containing all compiled files -->
        <antcall target="-jar.sub">
            <param name="jarfile"   value="${libdir}/${jar.name.full}" />
            <param name="jbasedir"  value="${classesdir.main}" />
            <param name="jexcludes" value="log4j.xml" />
        </antcall>
    </target>

<!-- ==================== Test Targets ================================== -->

    <target name="test" depends="compile.test"
            description="Runs JUnit tests" >
        <mkdir dir="${cachedir.test}" />
        <delete dir="${testreportdir}" />
        <mkdir dir="${testreportdir}" />
        <junit dir="${cachedir.test}" printsummary="yes" haltonfailure="no" fork="yes" >
            <classpath refid="build.run.classpath" />
            <sysproperty
                key="${log4j.system.variable.name}"
                value="${log4j.log.path}" />
            <!--<sysproperty
                key="log4j.configuration"
                value="file:./log4j.xml" />-->
            <formatter
                type="xml"
                usefile="yes" />
            <batchtest todir="${testreportdir}" >
                <fileset refid="unit.test.files" />
            </batchtest>
        </junit>
        <antcall target="-test.report.html" />
    </target>

    <target name="-test.report.html" >
            <!--description="Convert the junit xml files to html" -->
        <junitreport todir="${testreportdir}" >
            <fileset dir="${testreportdir}" >
                <include name="TEST-*.xml" />
            </fileset>
            <report
                format="frames"
                todir="${testreportdir}/html" />
        </junitreport>
    </target>

<!-- ==================== Dependency Targets ================================== -->

    <target name="download" depends="download.contrib.dependencies, download.contrib.dependencies, download.vizant"
            description="Download all specified binary packages" />

    <target name="download.core.dependencies" depends="-proxyflags"
            description="Download binary packages needed by the core packages" >
        <mkdir dir="${dependenciesdir}" />
        <!-- Downdown any sub package or tools needed. -->
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${skaringa.loc}"/>
            <param name="destfile" value="${skaringa.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${log4j.loc}"/>
            <param name="destfile" value="${log4j.jar}"/>
        </antcall>
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${ant-contrib.loc}"/>
            <param name="destfile" value="${ant-contrib.jar}"/>
        </antcall>
    </target>

    <target name="download.contrib.dependencies" depends="-proxyflags"
            description="Download binary packages needed by the contrib packages" >
        <mkdir dir="${dependenciesdir}" />
        <!-- Downdown any sub package or tools needed. -->
        <antcall target="-downloadgz">
            <param name="sourcefile" value="${commons-jxpath.loc}"/>
            <param name="destfile" value="${commons-jxpath.jar}"/>
        </antcall>
    </target>

    <!-- ==================== Demo Targets ================================== -->

    <target name="-demo.init">
        <mkdir dir="${cachedir.demo}" />
    </target>

<!--
    <target name="run.demo.prime" depends="compile.core, -demo.init"
            description="Runs simple prime number demonstration" >

        <java dir="${cachedir.demo}" fork="false" classname="org.prevayler.demos.demo1.Main" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>

    </target>
-->

    <target name="run.demo.bank" depends="compile.core, -demo.init"
            description="Runs simple bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.Main" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.xml" depends="compile.core, -demo.init"
            description="Same as simple bank demo, but uses skaringa xml serialization" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainXml" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.transient" depends="compile.core, -demo.init"
            description="Runs transient bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainTransient" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

<!--
    <target name="run.demo.bank.rollback" depends="compile.core, -demo.init"
            description="Runs rollback bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainRollback" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>
-->

    <target name="run.demo.bank.replica" depends="compile.core, -demo.init"
            description="Runs replica bank demonstration" >
        <parallel>
            <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainReplicaServer" >
                <classpath refid="build.run.classpath" />
                <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
            </java>
            <sequential>
                <sleep seconds="5"/>
                <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.demo2.MainReplica" >
                    <arg value="localhost" />
                    <classpath refid="build.run.classpath" />
                    <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
                </java>
            </sequential>
        </parallel>
    </target>

    <target name="run.demo.scalability" depends="compile.core, -demo.init"
            description="Runs manipulation and query scalability demos against Prevayler and any JDBC database" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.scalability.Main" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <target name="run.demo.bank.memento" depends="compile.contrib, -demo.init"
            description="Runs memento bank demonstration" >
        <java dir="${cachedir.demo}" fork="true" classname="org.prevayler.demos.memento.TestErrorRecoveryWithMementos" >
            <classpath refid="build.run.classpath" />
            <sysproperty key="${log4j.system.variable.name}" value="${log4j.log.path}" />
        </java>
    </target>

    <!-- custom XML entity include of general utility targets including download and vizAnt stuff -->
    &general-utility-targets;
    &self-customized-targets;

</project>
