<?xml version="1.0" encoding="UTF-8"?>

<project name="Prevayler" default="compile.core" basedir=".">

    <property file="${user.home}/.${ant.project.name}-build.properties"/>
    <property file="${user.home}/.build.properties"/>
    <property environment="env"/> <!-- provides access to system environment variables -->
    <property file="build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

    <property name="build.home"             location="${basedir}/build" />
    <property name="dist.home"              location="${basedir}/dist" />
    <property name="doc.home"               location="${basedir}/docs" />
    <property name="jars.home"              location="${basedir}/jars" />
    <property name="lib.home"               location="${basedir}/lib" />
    <property name="src.home"               location="${basedir}/src" />
    <property name="src.package.path"       value="org/prevayler" />
    <property name="src.packages"           value="org.prevayler.*" />
    <property name="src.packages.excludes"  value="org.prevayler.demos.*, org.prevayler.test.*" />


<!--  ==================== Compilation Control Options ==================== -->

    <property name="build.debug"        value="on" />
    <property name="build.deprecation"  value="off" />
    <property name="build.optimize"     value="on" />
    <property name="build.verbose"      value="off" />


<!-- ==================== External Dependencies =========================== -->

<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.

-->

    <!-- Dummy external dependency -->
    <!--
    <property name="foo.jar"
              value="/path/to/foo.jar"/>
    -->


<!-- ==================== Compilation Classpath =========================== -->

    <path id="build.classpath" >

        <!-- Include all JAR files that will be needed by your application -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
        <!--
        <pathelement location="${foo.jar}"/>
        -->

    </path>

    <path id="build.test.classpath" >

        <pathelement location="${build.home}" />
        <path refid="build.classpath" />

    </path>


<!-- ==================== Rebuild Target ====================================== -->

  <target name="rebuild" depends="clean, compile"
          description="Clean build and dist directories, then compile" />


<!-- ==================== Clean Targets ==================================== -->

    <target
        name="clean.all"
        depends="clean, clean.cache"
        description="Clean up everything including log and snapshot files generated by demos" />

    <target name="clean"
            description="Delete old build and dist directories" >

        <delete dir="${build.home}" />
        <delete dir="${dist.home}" />
        <delete dir="${doc.home}/api" />
        <delete file="${lib.home}/${jar.name.core}" />
        <delete file="${lib.home}/${jar.name.full}" />

    </target>

    <target name="clean.cache"
            depends="clean.cache.tests, clean.cache.demos"
            description="Removes log and snapshot files generated by tests and demos" />

    <target name="clean.cache.tests"
            description="Removes log and snapshot files generated by tests" >

        <delete includeEmptyDirs="true">
            <fileset dir="${basedir}" >
                <include name="PrevalenceBase**/**" />
                <include name="**Test/**" />
                <include name="ScalabilityTest.properties" />
            </fileset>
        </delete>

    </target>

    <target name="clean.cache.demos"
            description="Removes log and snapshot files generated by demos" >

        <delete includeEmptyDirs="true">
            <fileset dir="${basedir}" >
                <include name="demo**/**" />
                <include name="PrevalenceBase/**" />
            </fileset>
        </delete>

    </target>


<!-- ==================== Prepare Target ================================== -->

    <target name="prepare" >

        <!-- Create build directories as needed -->
        <mkdir  dir="${build.home}" />

        <!-- Copy static files from external dependencies as needed -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

        <tstamp/>

    </target>


<!-- ==================== Compile Target ================================== -->

    <target name="compile" depends="compile.core, compile.test" />

    <target name="compile.core" depends="prepare"
            description="Compile Java sources" >

        <!-- Compile Java classes as necessary -->
        <javac
            srcdir="${src.home}"
            destdir="${build.home}"
            includes="**/*.java"
            excludes="**/old**/**,**/test/**"
            debug="${build.debug}"
            deprecation="${build.deprecation}"
            optimize="${build.optimize}"
            verbose="${build.verbose}">
            <classpath refid="build.classpath" />
        </javac>

        <!-- Copy application resources -->
        <copy todir="${build.home}" >
            <fileset
                dir="${src.home}"
                excludes="**/test/**"
                includes="**/*.properties,
                          **/*.character-sets,
                          **/*.dtd,
                          **/*.xml" />
        </copy>

    </target>

    <target name="compile.test" depends="prepare, compile.core"
            description="Compile Java test case sources" >

        <!-- Compile Java classes as necessary -->
        <javac
            srcdir="${src.home}"
            destdir="${build.home}"
            includes="**/test/**/*.java"
            excludes="**/old**/**"
            debug="${build.debug}"
            deprecation="${build.deprecation}"
            optimize="${build.optimize}"
            verbose="${build.verbose}">
            <classpath refid="build.classpath" />
        </javac>

        <!-- Copy application resources -->
        <copy todir="${build.home}" >
            <fileset
                dir="${src.home}"
                includes="**/test/**/*.properties,
                          **/test/**/*.character-sets,
                          **/test/**/*.dtd,
                          **/test/**/*.xml" />
        </copy>

    </target>


<!-- ==================== Dist Target ===================================== -->

    <target name="dist" depends="jar,javadoc"
            description="Create binary distribution" >

        <!-- Generate ZIP distribution -->
        <zip destfile="${dist.home}/${zip.name.dist}">
            <zipfileset dir="${basedir}"        prefix="${app.name}" includes="*.xml, *.properties"/>
            <zipfileset dir="${doc.home}"       prefix="${app.name}/docs"/>
            <zipfileset dir="${jars.home}"      prefix="${app.name}/jars"/>
            <zipfileset dir="${lib.home}"       prefix="${app.name}/lib"/>
            <zipfileset dir="${src.home}"       prefix="${app.name}/src" includes="**/*.java"/>
        </zip>

    </target>


<!-- ==================== Javadoc Target ================================== -->

    <target name="javadoc" depends="compile.core"
            description="Create Javadoc API documentation" >

        <mkdir dir="${doc.home}/api" />

        <condition property="javadoc.breakiterator" value="-breakiterator" >
            <or>
                <equals arg1="${ant.java.version}" arg2="1.4" />
                <equals arg1="${ant.java.version}" arg2="1.5" />
            </or>
        </condition>
        <property name="javadoc.breakiterator" value="" />

        <condition property="javadoc.jdk.href" value="http://java.sun.com/products/jdk/1.2/docs/api/">
            <equals arg1="${ant.java.version}" arg2="1.2" />
        </condition>
        <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.3/docs/api/">
            <equals arg1="${ant.java.version}" arg2="1.3" />
        </condition>
        <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.4/docs/api/">
            <equals arg1="${ant.java.version}" arg2="1.4" />
        </condition>
        <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.5/docs/api/">
            <equals arg1="${ant.java.version}" arg2="1.5" />
        </condition>
        <property name="javadoc.jdk.href" value="" />

        <property name="javadoc.jdk.offline" value="false" />
        <property name="javadoc.jdk.packaglistLoc" value="" />

        <javadoc
            sourcepath="${src.home}"
            packagenames="${src.packages}"
            excludepackagenames="${src.packages.excludes}"
            destdir="${doc.home}/api"
            author="true"
            version="true"
            use="true"
            additionalparam="${javadoc.breakiterator}"
            windowtitle="${app.name}&#8482; v${app.version} API Documentation" >

            <!-- <packageset...> below only works with Ant 1.5+.
                 We can use <packageset...> and remove "packagenames", "excludepackagenames",
                 and "sourcepath" attributes of the javadoc task -->
            <!--<packageset dir="${src.home}" defaultexcludes="yes" >
                <include name="${src.package.path}/**" />
            </packageset>-->

            <header><![CDATA[<a href="${app.url}" target="_blank">${app.name} Online</a>]]></header>
            <doctitle><![CDATA[<h1>${app.Name}</h1>]]></doctitle>
            <footer><![CDATA[<a href="${app.url}" target="_blank">${app.name} Online</a>]]></footer>
            <bottom><![CDATA[<i>${app.trademark}<br>Copyright &#169; ${app.year} ${app.company} All Rights Reserved.</i>]]></bottom>
            <link offline="${javadoc.jdk.offline}" href="${javadoc.jdk.href}" packagelistLoc="${javadoc.jdk.packagelistLoc}" />
            <classpath refid="build.test.classpath" />
        </javadoc>

    </target>


<!-- ==================== Jar Targets ================================== -->

    <target name="jar" depends="jar.core, jar.full"
            description="Creates all jars" />

    <target name="jar.init" >

        <mkdir dir="${dist.home}" />

    </target>

    <target name="jar.core" depends="compile.core, jar.init"
            description="Creates a JAR containing only essential Prevayler files" >

        <jar jarfile="${lib.home}/${jar.name.core}"
             basedir="${build.home}"
             excludes="**/demo/**,
                      **/demos/**,
                      **/test/**" />

    </target>

    <target name="jar.full" depends="compile, jar.init"
            description="Creates a JAR containing all compiled files" >

        <jar jarfile="${lib.home}/${jar.name.full}"
             basedir="${build.home}" />

    </target>

<!-- ==================== Test Targets ================================== -->

    <target name="run.test.functional" depends="compile"
            description="Runs the functional tests used to test Prevayler during development" >

        <java fork="true" classname="org.prevayler.test.Main" >
            <classpath refid="build.test.classpath" />
        </java>

    </target>

    <target name="run.test.scalability" depends="compile"
            description="Runs manipulation and query scalability tests against Prevayler and any JDBC database" >

        <java fork="true" classname="org.prevayler.test.scalability.Main" >
            <classpath refid="build.test.classpath" />
        </java>

    </target>

<!-- ==================== Demo Targets ================================== -->

<!--
    <target name="run.demo.prime" depends="compile.core"
            description="Runs simple prime number demonstration" >

        <java fork="false" classname="org.prevayler.demos.demo1.Main" >
            <classpath refid="build.test.classpath" />
        </java>

    </target>
-->

    <target name="run.demo.bank" depends="compile.core"
            description="Runs simple bank demonstration" >

        <java fork="true" classname="org.prevayler.demos.demo2.Main" >
            <classpath refid="build.test.classpath" />
        </java>

    </target>

    <target name="run.demo.bank.transient" depends="compile.core"
            description="Runs transient bank demonstration" >

        <java fork="true" classname="org.prevayler.demos.demo2.MainTransient" >
            <classpath refid="build.test.classpath" />
        </java>

    </target>

    <target name="run.demo.bank.replica" depends="compile.core"
            description="Runs replica bank demonstration" >

        <parallel>
            <java fork="true" classname="org.prevayler.demos.demo2.MainReplicaServer" >
                <classpath refid="build.test.classpath" />
            </java>
            <sequential>
                <sleep seconds="3"/>
                <java fork="true" classname="org.prevayler.demos.demo2.MainReplica" >
                    <arg value="localhost" />
                    <classpath refid="build.test.classpath" />
                </java>
            </sequential>
        </parallel>

    </target>

</project>
